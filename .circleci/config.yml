version: 2.1
orbs:
  node: circleci/node@5.1.0
workflows:
  main:
    jobs:
      - build:
          name: build-compass
          project: compass
          with-coverage: true
      - build:
          name: build-objects
          project: compass-objects
          with-coverage: false
      - build:
          name: build-workflows
          project: compass-workflows
          with-coverage: true
      - hold:
          type: approval
          requires:
            - build-compass
            - build-objects
            - build-workflows
      - deploy:
          name: deploy-compass
          project: compass
          requires:
            - hold
      - deploy:
          name: deploy-objects
          project: compass-objects
          requires:
            - hold
      - deploy:
          name: deploy-workflows
          project: compass-workflows
          requires:
            - hold
parameters:
  netsuite_account:
    description: The Account ID for the target NetSuite environment
    type: enum
    enum: [ "3751499", "3751499_SB1", "3751499_SB2" ]
    default: "3751499_SB1"
  commit_reference:
    description: The git commit reference (commit hash, branch name, tag name, etc) to operate on
    type: string
    default: ''
jobs:
  build:
    executor: sdf
    parameters:
      project:
        description: The SDF Project to build
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
      with-coverage:
        description: |
          Determines whether the test suite will generate a code coverage report.
          true to generate code coverage report; false otherwise.
        type: boolean
        default: true
    steps:
      - install:
          project: << parameters.project >>
      - test:
          project: << parameters.project >>
          with-coverage: << parameters.with-coverage >>
      - lint:
          project: << parameters.project >>
      - validate:
          account: << pipeline.parameters.netsuite_account >>
          project: << parameters.project >>
          token_id: $SB1_TOKEN_ID
          token_secret: $SB1_TOKEN_SECRET
  deploy:
    executor: sdf
    parameters:
      project:
        description: The SDF Project to deploy
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
    steps:
      - install
      - deploy:
          account: << pipeline.parameters.netsuite_account >>
          commit1: << pipeline.parameters.commit_reference >>
          # TODO: commit2
          project: << parameters.project >>
          # TODO: Dynamic tokens
          token_id: $SB1_TOKEN_ID
          token_secret: $SB1_TOKEN_SECRET
commands:
  deploy:
    description: |
      Deploys the given SDF Project to a given target account; only deploys Objects which have
      changed between two given commit references.
    parameters:
      account:
        description: The NetSuite Account ID
        type: enum
        enum: [ "3751499", "3751499_SB1", "3751499_SB2" ]
        default: "3751499_SB1"
      commit1:
        description: |
          The git commit reference to deploy. Can be any valid commit reference, e.g. a branch name,
          a commit hash, HEAD~5, etc
        type: string
      commit2:
        description: |
          The git commit reference to use as the comparison base when detecting changes. Can be any
          valid commit reference, e.g. a branch name, a commit hash, HEAD~5, etc
        type: string
      project:
        description: The SDF Project to deploy
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
      token_id:
        description: The NetSuite Token ID
        type: string
      token_secret:
        description: The NetSuite Token Secret
        type: string
    steps:
      - run:
          name: Deploying << parameters.project >>
          command: |
            sdf-deploy << parameters.project >> << parameters.commit1 >> << parameters.commit2 >> << parameters.account >> << parameters.token_id >> << parameters.token_secret >>
      - store_artifacts:
          path: << parameters.project >>/build
  install:
    description: Checks out code and installs npm package
    parameters:
      project:
        description: The SDF Project to install
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
    steps:
      - checkout
      - configure-npm
      - run: |
          source ./scripts/env-setup.sh
      - node/install-packages:
          app-dir: ./<< parameters.project >>
          override-ci-command: npm ci --acceptsuitecloudsdklicense
  lint:
    description: Lint all code and save results
    parameters:
      project:
        description: The SDF Project to lint
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
    steps:
      - run:
          name: Linting << parameters.project >>
          command: |
            npm run lint-ci --prefix ./<< parameters.project >>
      - store_artifacts:
          path: << parameters.project >>/reports/eslint.html
  configure-npm:
    description: Configure npm to use Nexus
    steps:
      - run:
          name: Generate npmrc
          command: |
            printf "email=$ARTIFACT_STORE_EMAIL
            always-auth=true
            registry=https://artifacts.compass-tech.net/repository/npm
            //artifacts.compass-tech.net/repository/:_auth=$ARTIFACT_STORE_NPM_AUTH
            //artifacts.compass-tech.net/repository/:_password=$ARTIFACT_STORE_NPM_PASS
            //artifacts.compass-tech.net/repository/:username=$ARTIFACT_STORE_NPM_USER
            //artifacts.compass-tech.net/repository/:email=$ARTIFACT_STORE_EMAIL
            //artifacts.compass-tech.net/repository/:always-auth=true" > ~/.npmrc
  test:
    description: Test the SDF Project, optionally producing a code coverage report as well
    parameters:
      with-coverage:
        description: |
          Determines whether the test suite will generate a code coverage report.
          true to generate code coverage report; false otherwise.
        type: boolean
        default: true
      project:
        description: The SDF Project to test
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
    steps:
      - when:
          condition: << parameters.with-coverage >>
          steps:
            - run:
                name: Unit testing << parameters.project >> with coverage
                command: |
                  npm run test-ci-coverage --prefix ./<< parameters.project >>
            - store_artifacts:
                path: << parameters.project >>/reports/coverage
      - unless:
          condition: << parameters.with-coverage >>
          steps:
            - run:
                name: Unit testing << parameters.project >> without coverage
                command: |
                  npm run test-ci --prefix ./<< parameters.project >>
      - store_test_results:
          path: << parameters.project >>/reports/jest.xml
  validate:
    description: Validate the SDF Project
    parameters:
      account:
        description: The NetSuite Account ID
        type: enum
        enum: [ "3751499", "3751499_SB1", "3751499_SB2" ]
        default: "3751499_SB1"
      project:
        description: The SDF Project to test
        type: enum
        enum: [ "compass", "compass-workflows", "compass-objects" ]
        default: compass
      token_id:
        description: The NetSuite Token ID
        type: string
      token_secret:
        description: The NetSuite Token Secret
        type: string
    steps:
      - run:
          name: Validating << parameters.project >>
          command: |
            export PATH=$PATH:~/project/<< parameters.project >>/node_modules/.bin
            cd << parameters.project >>
            suitecloud account:savetoken --account << parameters.account >> --authid << parameters.account >> --tokenid << parameters.token_id >> --tokensecret << parameters.token_secret >>
            npm run sdf-validate
executors:
  sdf:
    resource_class: small
    docker:
      - image: cimg/openjdk:17.0-node
        environment:
          TZ: America/New_York
